from detectron2.config.config import CfgNode as CN

_C = CN()

_C.VERSION = 2

_C.TASK = 'NAS'

_C.SEARCH_SPACE = CN()
_C.SEARCH_SPACE.TYPE = 'DARTS'           # search space type: (NasBench101, NasBench201, DARTS)
_C.SEARCH_SPACE.DATASET = 'CIFAR10'    # support dataset CIFAR10, CIFAR100, IMAGENET
_C.SEARCH_SPACE.HAS_GT = 'N'           # 'Y' or 'N'

_C.SEARCH_SPACE.NASBENCH_101 = CN()
_C.SEARCH_SPACE.NASBENCH_101.TF_FILE_PATH = ''
_C.SEARCH_SPACE.NASBENCH_101.NUM_VERTICES = 7
_C.SEARCH_SPACE.NASBENCH_101.MAX_EDGES = 9
_C.SEARCH_SPACE.NASBENCH_101.OPS = ('input', 'conv3x3-bn-relu', 'conv1x1-bn-relu', 'maxpool3x3', 'output', 'isolate')
_C.SEARCH_SPACE.NASBENCH_101.SEQ_AWARE_PATH_LEN = 120
_C.SEARCH_SPACE.NASBENCH_101.GRAPH_NODE_DIM = 6

_C.SEARCH_SPACE.NASBENCH_201 = CN()
_C.SEARCH_SPACE.NASBENCH_201.BASE_PATH = ''
_C.SEARCH_SPACE.NASBENCH_201.CIFAR10_PATH = ''
_C.SEARCH_SPACE.NASBENCH_201.CIFAR100_PATH = ''
_C.SEARCH_SPACE.NASBENCH_201.IMAGENET_PATH = ''
_C.SEARCH_SPACE.NASBENCH_201.NUM_VERTICES = 8
_C.SEARCH_SPACE.NASBENCH_201.OPS = ('input', 'none', 'skip_connect', 'nor_conv_1x1', 'nor_conv_3x3', 'avg_pool_3x3',
                                    'isolate', 'output')
_C.SEARCH_SPACE.NASBENCH_201.SEQ_AWARE_PATH_LEN = 96
_C.SEARCH_SPACE.NASBENCH_201.GRAPH_NODE_DIM = 8
_C.SEARCH_SPACE.NASBENCH_201.DATASET = "cifar10-valid"    # ("cifar10-valid", "cifar100", "ImageNet16-120")

_C.SEARCH_SPACE.DARTS = CN()
_C.SEARCH_SPACE.DARTS.PATH = ''
_C.SEARCH_SPACE.DARTS.NUM_VERTICES = 15
_C.SEARCH_SPACE.DARTS.OPS = ('input', 'none', 'max_pool_3x3', 'avg_pool_3x3', 'skip_connect', 'sep_conv_3x3',
                             'sep_conv_5x5', 'dil_conv_3x3', 'dil_conv_5x5', 'concat', 'output')

_C.SEARCH_SPACE.NASBENCH_NLP = CN()
_C.SEARCH_SPACE.NASBENCH_NLP.TYPE = "last"    # ("best", "last")
_C.SEARCH_SPACE.NASBENCH_NLP.FILTER_NONE = "y"    # ("y", "n")


_C.SEARCH_SPACE.NASBENCH_ASR = CN()

_C.SEARCH_SPACE.SEG_101 = CN()
_C.SEARCH_SPACE.SEG_101.SPATIAL_OPS = ['Zero', 'AdaptiveAvgPool_25', 'DilConv_3', "Conv2d_3"]
_C.SEARCH_SPACE.SEG_101.SPATIAL_OPS_S4 = ['AdaptiveAvgPool_25', 'DilConv_3', "SelfAttention", "SEAttentionStandard_8"]
_C.SEARCH_SPACE.SEG_101.CHANNEL_OPS = ['SEAttention_8']
_C.SEARCH_SPACE.SEG_101.STAGE_SEP_OPS = ['Zero', 'DilConv_3', 'DilConv_5', 'AdaptiveAvgPool_25', 'AdaptiveAvgPool_75']
_C.SEARCH_SPACE.SEG_101.HEAD_MERGE_OPS = ['GlobalSEHead_8', 'ConcatHeadLayer']
# ['dice', 'cross_entropy', 'hard_pixel_mining']
_C.SEARCH_SPACE.SEG_101.SEG_LOSS = 'hard_pixel_mining'
_C.SEARCH_SPACE.SEG_101.BACKBONE_STAGES = ["s1", "s2", "s3", "s4"]
_C.SEARCH_SPACE.SEG_101.GROUP_OPTION = 4                                  # [4, 8, 16, 32, 64]
_C.SEARCH_SPACE.SEG_101.STAGE_MERGE_OUT_RATIO = 0.25
_C.SEARCH_SPACE.SEG_101.GRAPH_NODE_DIM = 100

_C.SEARCH_STRATEGY = CN()
# The search strategy used to find best performing neural architecture.
_C.SEARCH_STRATEGY.TYPE = 'NPENAS'     # NPENAS_BO, NPENAS_NP, BANANAS, NPENAS_SS_NP, NPENAS_CLR_NP
_C.SEARCH_STRATEGY.ALLOW_ISOMORPHISMS = False
# support: encode_path, encode_adj, encode_path_seq_aware and encode_graph
# Search strategy bananas use this strategy to determine which architecture encoding method to use.
_C.SEARCH_STRATEGY.ENCODE_METHOD = 'encode_path'  # encode_path, encode_adj, encode_path_aware
_C.SEARCH_STRATEGY.NUM_INIT = 10
_C.SEARCH_STRATEGY.K = 10
_C.SEARCH_STRATEGY.SEARCH_BUDGET = 100
_C.SEARCH_STRATEGY.NUM_BEST_ARCHITECTURES = 10
_C.SEARCH_STRATEGY.CANDIDATE_NUMS = 100
_C.SEARCH_STRATEGY.MUTATION_RATE = 1.0
_C.SEARCH_STRATEGY.FIXED_NUM = 100
_C.SEARCH_STRATEGY.LOSS_TYPE = "mae"        # mae

_C.SEARCH_STRATEGY.BANANAS = CN()
_C.SEARCH_STRATEGY.BANANAS.NUM_ENSEMBLES = 5
_C.SEARCH_STRATEGY.BANANAS.NUM_LAYERS = 10
_C.SEARCH_STRATEGY.BANANAS.LAYER_WIDTH = 20

_C.SEARCH_STRATEGY.EVOLUTIONARY = CN()
_C.SEARCH_STRATEGY.EVOLUTIONARY.POPULATION_SIZE = 30
_C.SEARCH_STRATEGY.EVOLUTIONARY.TOURNAMENT_SIZE = 10
_C.SEARCH_STRATEGY.EVOLUTIONARY.MUTATION_RATE = 1.0

_C.SEARCH_STRATEGY.NPENAS = CN()
_C.SEARCH_STRATEGY.NPENAS.ENGINE = "GINPredictorTrainer"

_C.PREDICTOR = CN()
_C.PREDICTOR.TYPE = 'GINPredictor'   # GINPredictorUncertainty, GINPredictor, GINFeaturePredictor
_C.PREDICTOR.DIM2 = 32
_C.PREDICTOR.NUM_CLASSES = 1
_C.PREDICTOR.PRE_TRAIN_METHOD = ''    # SS_CCL, SS_RL
_C.PREDICTOR.RESUME_DIR = ''


_C.SOLVER_NAS = CN()
_C.SOLVER_NAS.BATCH_SIZE = 32
_C.SOLVER_NAS.LR = 0.005
_C.SOLVER_NAS.EPOCHS = 300
_C.SOLVER_NAS.WEIGHT_DEACY = 1e-4
_C.SOLVER_NAS.RATE = 10.
_C.SOLVER_NAS.SCHEDULE = (120, 160)
_C.SOLVER_NAS.MOMENTUM = 0.9
_C.SOLVER_NAS.WORKERS = 0
_C.SOLVER_NAS.COS = True  # using the cos learning rate schedule

_C.SOLVER_NN = CN()
_C.SOLVER_NN.AUXILIARY = False
_C.SOLVER_NN.AUXILIARY_WEIGHT = 0
_C.SOLVER_NN.CUTOUT = False
_C.SOLVER_NN.CUTOUT_LENGTH = 0
_C.SOLVER_NN.DROP_PATH_PROB = 0.0
_C.SOLVER_NN.GRAD_CLIP = 5
_C.SOLVER_NN.TRAIN_PORTION = 0.5
_C.SOLVER_NN.EPOCHS = 50
_C.SOLVER_NN.LR = 0.025
_C.SOLVER_NN.MOMENTUM = 0.9
_C.SOLVER_NN.WEIGHT_DEACY = 3e-4
_C.SOLVER_NN.BATCH_SIZE = 64
_C.SOLVER_NN.ETA_MIN = 1e-6

_C.SOLVER_NN.SEG = CN()
_C.SOLVER_NN.SEG.CONFIG = ""

_C.DATASETS = CN()
_C.DATASETS.CIFAR10 = ''
_C.DATASETS.CIFAR100 = ''
_C.DATASETS.IMAGENET = ''
_C.DATASETS.CITYSCAPES = ''
_C.DATASETS.WUHAN_BUILDINGS = ''
_C.DATASETS.MASS_ROADS = ''
_C.DATASETS.AERIAL_IMAGE = ''
_C.DATASETS.RODA_TRACER = ''
_C.DATASETS.DEEP_GLOBAL_ROAD = ''
_C.DATASETS.GID = ''


# self-supervised learning
_C.SELF_SUPERVISED = CN()
_C.SELF_SUPERVISED.ARCH = 'SS_CCL'       #  [moco, SS_RL, SS_CCL]
_C.SELF_SUPERVISED.MOCO_T = 0.07
# This parameter used to determinated how many architectures used for contrastive leanring.
_C.SELF_SUPERVISED.TRAIN_SAMPLES = 5000
_C.SELF_SUPERVISED.BATCH_STEP = 1000
_C.SELF_SUPERVISED.MARGIN = 0.
_C.SELF_SUPERVISED.MIN_NEGATIVE_SIZE = 9900
_C.SELF_SUPERVISED.CENTER_REGULARIZATION = True
_C.SELF_SUPERVISED.WITH_G_HEAD = False
_C.SELF_SUPERVISED.BATCH_SIZE = 10000
_C.SELF_SUPERVISED.WORKERS = 0
_C.SELF_SUPERVISED.EPOCHS = 300

_C.SELF_SUPERVISED.M_GPUS = CN()
_C.SELF_SUPERVISED.M_GPUS.WORLD_SIZE = 1
_C.SELF_SUPERVISED.M_GPUS.RANK = 0
_C.SELF_SUPERVISED.M_GPUS.DIST_URL = ''
_C.SELF_SUPERVISED.M_GPUS.DIST_BACKEND = 'nccl'
_C.SELF_SUPERVISED.M_GPUS.GPU_COUNT = 0
_C.SELF_SUPERVISED.M_GPUS.GPU_BASE = 0
_C.SELF_SUPERVISED.M_GPUS.GPU = -1
_C.SELF_SUPERVISED.M_GPUS.DISTRIBUTED = False
_C.SELF_SUPERVISED.M_GPUS.MULTIPROCESSING_DISTRIBUTED = False


_C.SEED = 3333
# _C.SAVE_DIR = '/home/albert_wei/fdisk_a/train_output_remote/nas_nasbench_101_output_dir/'
_C.PRINT_FREQ = 1


def get_cfg():
    return _C.clone()